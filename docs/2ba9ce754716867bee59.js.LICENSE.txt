/*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */

/* .DndContext */

/* .invariant */

/* Reaction */

/* binding */

/* configure */

/* for generated name */

/* getDependencyTree */

/* harmony export */

/* harmony import */

/* invariant */

/* isRef */

/* istanbul ignore next */

/* makeObservable */

/* reexport */

/* registerSource */

/* registerTarget */

/* see #1208 */

/* shallowEqual */

/* useCollectedProps */

/* useDragDropManager */

/* useIsomorphicLayoutEffect */

/* useOptionalFactory */

/* wrapConnectorHooks */

/*#__PURE__*/

/**
         * On timer based implementation we don't really need this object,
         * but we keep the same api
         */

/**
     * Latest 'uncommitted reactions' cleanup timer handle.
     */

/**
     * Only to be used by test functions; do not export outside of mobx-react-lite
     */

/**
     * Reactions created by components that have yet to be fully mounted.
     */

/**
     * Run by the cleanup timer to dispose any outstanding reactions
     */

/**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */

/**
   * @param {PropertyKey} key
   * @param {Annotation|boolean} annotation true - infer from object or it's prototype, false - ignore
   */

/**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */

/**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */

/**
   * @param {PropertyKey} key
   * @param {any} value
   * @param {Annotation|boolean} annotation true - infer from descriptor, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */

/**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */

/**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */

/**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */

/**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */

/**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */

/**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */

/**
   * internal, use schedule() if you intend to kick off a reaction
   */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */

/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */

/**
 * Collects annotations from prototypes and stores them on target (instance)
 */

/**
 * Creates a function that acts as
 * - decorator
 * - annotation object
 */

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */

/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */

/**
 * FinalizationRegistry-based uncommitted reaction cleanup
 */

/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */

/**
 * Infers the best fitting annotation from property descriptor or false if the field shoudn't be annotated
 * - getter(+setter) -> computed
 * - setter w/o getter -> false (ignore)
 * - flow -> false (ignore)
 * - generator -> flow
 * - action -> false (ignore)
 * - function -> action (optionally bound)
 * - other -> defaultAnnotation
 */

/**
 * Internal utility hook to get an array-version of spec.accept.
 * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.
 * @param spec
 */

/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */

/**
 * Makes sure that the provided function is invoked at most once.
 */

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */

/**
 * Returns the following: own enumerable keys and symbols.
 */

/**
 * Stores annotation to prototype,
 * so it can be inspected later by `makeObservable` called from constructor
 */

/**
 * The frequency with which we'll check for leaked reactions.
 */

/**
 * The minimum time before we'll clean up a Reaction created in a render
 * for a component that hasn't managed to run its effects. This needs to
 * be big enough to ensure that a component won't turn up and have its
 * effects run without being re-rendered.
 */

/**
 * These values will persist if global state is reset
 */

/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */

/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */

/**
 * We use class to make it easier to detect in heap snapshots by name
 */

/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */

/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */

/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */

/**
 * timers, gc-style, uncommitted reaction cleanup
 */

/**
 * useDragSource hook
 * @param sourceSpec The drag source specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */

/** Merge another object into this object, returns this. */

/***/

//

//             " < " +

//             " because " +

//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance

//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance

//             min +

//             msg +

//             observable.lowestObserverState

//         "INTERNAL ERROR there is no junk in map"

//         "lowestObserverState is wrong for " +

//         const id = list[i].__mapid

//         if (i) {

//         list.length === 0 || Object.keys(map).length === list.length - 1,

//         }

//         } else {

//     )

//     // it's expensive so better not run it in produciton. but temporarily helpful for testing

//     const l = list.length

//     const list = observable.observers

//     const map = observable.observersIndexes

//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)

//     for (let i = 0; i < l; i++) {

//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`

//     invariant(

//     throw new Error(

//     }

//    since it wouldn't be a callable function anymore

//   0: it was set to 0 in last loop. don't need to do anything.

//   0: it's not in new observables, unobserve it

//   1: it keeps being observed, don't want to notify it. change to 0

//   1: it wasn't observed, let's observe it. set back to 0

// !globalState.trackingDerivatpion &&

// "decorate should work with Object.create"

// "in" as it may still exist in proto

// #2432 - reduce behavior depends on arguments.length

// (It triggers warnings in StrictMode, for a start.)

// - allow interceptors to run and potentially prevent individual operations

// - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)

// - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)

// - note that result map may differ from replacement map due to the interceptors

// - respect ordering of replacement map

// - typically it's used with simple data objects

// - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected

// 1. it cannot go before memo, only after it

// 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// @action

// @computed

// @computed({ options })

// @flow

// @observable someProp;

// @override must override something

// @ts-ignore

// A prototype could have been annotated already by other constructor,

// A shallow dependency has changed since last computation and the derivation

// ADD interceptor

// Add or update value

// Add the first object to the stack of traversed objects.

// Allow re-annotating this field

// Also prevents rewriting in subclass constructor

// An `egal` comparison is performed for other numeric values.

// Annotate

// Array

// Assume equality for cyclic structures. The algorithm for detecting cyclic

// BUT if we're a component that hasn't yet got to the useEffect()

// Bind automatically inferred actions?

// But: https://github.com/mobxjs/mobx/issues/1556

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useCollectedProps.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useCollector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/DragSourceImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/connectors.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/useDrag.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSource.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/useDragSourceConnector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/useDragType.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag/useRegisteredDragSource.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/DropTargetImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/connectors.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/useAccept.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/useDrop.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTarget.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/useDropTargetConnector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop/useRegisteredDropTarget.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useMonitorOutput.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/internals/DragSourceMonitorImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/internals/DropTargetMonitorImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/internals/SourceConnector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/internals/TargetConnector.js

// Cache the annotation.

// Called by Atom when its value changes

// Called by ComputedValue when it recalculate and its value changed

// Called on first mount only

// Check for possible key order change

// Clear observable

// Coerce dates and booleans to numeric primitive values. Dates are compared by their

// Compare `[[Class]]` names.

// Compare array lengths to determine if a deep comparison is necessary.

// Concurrently iterating/deleting keys

// Convert to map so we can do quick key lookups

// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289

// Copy props from proto as well, see test:

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut out early if the target id has not been set. This should prevent errors

// Decorator annotations are collected from whole prototype chain.

// Deep compare each member

// Deep compare objects.

// Deep compare the contents, ignoring non-numeric properties.

// Default to decorators

// Define

// Delete

// Delete keys that don't exist in replacement map

// Delete prevented by interceptor

// Don't annotate protos if bound

// Don't use .has(key) - we care about own

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js

// EXTERNAL MODULE: ./node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js

// EXTERNAL MODULE: ./node_modules/fast-deep-equal/index.js

// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/useCollectedProps.js + 2 modules

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/useIsomorphicLayoutEffect.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/useOptionalFactory.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/internals/isRef.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/internals/registration.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/internals/wrapConnectorHooks.js

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Ensure that both objects contain the same number of properties before comparing deep equality.

// Exhaust primitive checks

// Existing prop

// Failure or intercepted

// Finally block can return (or yield) stuff..

// First render for this component (or first time since a previous

// From Immer utils

// Go through all new observables and check diffValue: (now it should be unique)

// Go through all old observables and check diffValue: (it is unique after last bindDependencies)

// Got a change before first mount, force an update

// Great. We've already got our reaction from our render;

// Hence we work with two variables and check whether

// Hide this extra level by increasing the depth.

// However we don't have to worry about missing prop,

// Ideally we use for..of here, but the downcompiled version is really slow...

// Identical objects are equal. `0 === -0`, but they aren't identical.

// If original descriptor becomes relevant, move this to annotation directly

// If passed a ReactElement, clone it and attach this function as a ref.

// If size differs, keys are definitely modified

// Ignore override

// Implementation requirements:

// Inherited is fine - annotation cannot differ in subclass

// Initializing stack of traversed objects.

// Instance or bound

// Intercept

// Intercepted

// Interceptor can modify the array, copy it to avoid concurrent modification, see #1950

// Internal recursive comparison function for `isEqual`.

// It's done here since we only need them for objects and arrays comparison.

// It's time to tidy up this leaked reaction.

// Keep first because the operation can be intercepted

// Key doesn't exist yet, subscribe for it in case it's added later

// Linear search. Performance is inversely proportional to the number of

// Loop through all the candidate leaked reactions; those older

// Make sure callbacks recieve correct array arg #2326

// Map

// Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.

// Merge entries

// N.B: unminified as it is used by MST

// No Array.fill everywhere...

// No such prop

// Non-configurable for classes

// Non-observable

// Non-obsevable, therefore non-writable

// Not found (false means ignore)

// Not supported in IE, so there are not going to be symbol props anyway...

// Note that the "Dustbin Stress Test" fails if this is not

// Note we can do this only because annotation and field can't change.

// Note: without polyfill for ownKeys, symbols won't be picked up

// Notify

// Notify "has" observers

// Notify "keys/entries/values" observers

// Notify (value possibly changed by ObservableValue)

// Notify spies/listeners

// Notify: autorun(() => obj[key]), see #1796

// Object(NaN) is equivalent to NaN.

// Objects with different constructors are not equivalent, but `Object`s or `Array`s

// Observable has changed, meaning we want to re-render

// Optimization (avoids visiting protos)

// Optimization: don't pull the value unless we will need it

// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,

// Optimization: we use this frequently

// Overrides are not cached, unless `true`, see #2832

// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274

// Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is

// Prototype

// Pull descriptors first, so we don't have to deal with props added by administration ($mobx)

// Re-create the reaction

// Recursively compare objects and arrays.

// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

// Remove applied decorator annotation so we don't try to apply it again in subclass constructor

// Remove the first object from the stack of traversed objects.

// Report and delegate to dehanced array

// Returns all own keys, including non-enumerable and symbolic

// Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.

// See perf test 'computed memoization'

// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).

// See: https://github.com/andykog/mobx-devtools/

// Set

// Skip key subscription outside derivation

// Some new observed derivations may become stale during this derivation computation

// Strings, numbers, regular expressions, dates, and booleans are compared by value.

// TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place

// Test for A's keys different from B.

// The addition could have been prevent by interceptor

// The drag preview may either be attached via ref or connect function

// The drop target may either be attached via ref or connect function

// The reaction we set up in our render has been disposed.

// The update could have been prevented by interceptor

// The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307

// There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.

// This allows us to control the execution of the cleanup timer

// This can be due to bad timings of renderings, e.g. our

// This helps us achieve a neat API where user doesn't even know that refs

// This needs to be a deep-equality check because some monitor-collected values

// Throw on missing key, except for decorators:

// Trampolining, if runReactions are already running, new reactions will be picked up

// Trap for "in"

// Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

// Typescript workaround to make sure ObservableArray extends Array

// UNUSED EXPORTS: Observer, clearTimers, enableStaticRendering, isObserverBatched, isUsingStaticRendering, observerBatching, useAsObservableSource, useLocalObservable, useLocalStore, useObserver, useStaticRendering

// Unwrap any wrapped objects.

// Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,

// Use cached inferred annotations if available (only in classes)

// Use correctly ordered map

// Used anytime annotation is not explicitely provided

// Used by JSON.stringify

// Used by computed when its dependency changed, but we don't wan't to immediately recompute.

// Was a new key added?

// Was the key removed?

// We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)

// We choose to over-report in Object.keys(object), because:

// We could also place it on furthest proto, shoudn't matter

// We have reached useEffect(), so we're mounted, and can trigger an update

// We haven't yet reached useEffect(), so we'll need to trigger a re-render

// We need a copy as we will remove annotation from the list once it's applied.

// We will want to know whether a new key is added

// We've definitely already been mounted at this point

// We've just finished a round of cleanups but there are still

// Weex proto freeze protection was here,

// When FinalizationRegistry in use, this this is no-op

// When called from super() some props may not exist yet.

// When passed a node, call the hook straight away.

// While running reactions, new reactions might be triggered.

// _keysAtom.reportChanged() was already called

// `NaN`s are equivalent, but non-reflexive.

// `null` or `undefined` only equal to itself (strict comparison).

// action("name") & @action("name")

// action("name", fn() {})

// action(fn() {})

// add a new item

// add entry at the beginning of the result map

// all we need to do is to record that it's now mounted,

// already observable - ignore

// an async iterator

// and `derivation` is an observer of `obj`

// and also we want to preserve existing values

// and skip either the internal values map, or the base object with its property descriptors!

// and we don't want to end up with partially annotated proto chain

// anyway, so removed it in V6

// apply modifier

// are being used under the hood.

// array will be trimmed by bindDependencies

// assumes that annotation.make_/.extend_ works the same for plain objects

// at this point derivation is not holding any data about dependency tree

// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js

// because the decorator must have been applied to something.

// before being run or (outside batch and not being observed)

// but it is unclear why the hack is need as MobX never changed the prototype

// by default preserve previous allow

// changed by interceptor. Same applies for other Set and Map api's.

// component was paused for a _very_ long time, and our

// computed values are automatically teared down when the last observer leaves

// computed(expr, options?)

// conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

// const IF_AVAILABLE = "ifavailable"

// currently only ComputedValue will propagate POSSIBLY_STALE

// debounced autorun

// default `noop` listener will not initialize the hook Set

// delete prop (do first, may fail)

// deleting last observer

// disposed during last run. Clean up everything that was bound after the dispose call.

// disposer function

// do not edit .js files directly - edit src/index.jst

// don't allow state changes during computation

// don't have to recompute on every dependency change, but only when it's needed

// done when the component updates

// during tracking it's an array with new observed observers

// eat anything that promise would do, it's cancelled!

// equivalent to `new String("5")`.

// eslint-disable-next-line

// eslint-disable-next-line no-prototype-builtins

// flow(fn)

// for computed, value is undefined

// for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

// from different frames are.

// function invariantLOS(observable: IObservable, msg: string) {

// function invariantObservers(observable: IObservable) {

// got dropped, and we don't want to make state changes then.

// hasMap, not hashMap >-).

// having this state is second big optimization:

// https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058

// https://github.com/react-dnd/react-dnd/issues/1310

// https://stackoverflow.com/a/37865170

// ideally, value = change.value would be done here, so that values can be

// if ComputedValue `obj` actually changed it will be computed and propagated to its observers.

// if disposed while running, clean up later. Maybe not optimal, but rare case

// if nothing has changed then don't resubscribe

// if the key deletion is prevented by interceptor

// if this observable had reactive observers, trigger the hooks

// in the majority of cases

// include XYCoord objects that may be equivalent, but do not have instance equality.

// intercept

// invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");

// invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");

// invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");

// invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");

// invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");

// invariantLOS(observable, "changed start");

// invariantLOS(observable, "confirmed start");

// invariantLOS(observable, "maybe start");

// invariantObservers(observable);

// invariantShouldCompute(derivation)

// it is an observable already, done

// iterator should handle this correctly

// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54

// map

// maybe it can be cancelled :)

// millisecond representations. Note that invalid dates with millisecond representations

// mobx versions

// must pass "undefined" for { key: undefined }

// n.b. base case is not used for actual typings or exported in the typing files

// never turn into an observable

// newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)

// no shallow dependency changed since last computation

// nodes we are looking at. Our value depends on these nodes

// normal autorun

// not hitting the condition

// notify spy & observers

// null (intercepted) -> true (success)

// numeric string

// of `NaN` are not equivalent.

// onBecomeObservedListeners

// other object - ignore

// out of bounds

// plain object

// pre allocate array allocation + room for variation in deps

// prettier-ignore

// prevents accidental field redefinition in subclass

// provides ability to disable safeDescriptors for prototypes

// re-throw any exceptions caught during rendering

// reaction from an abandoned render was disposed).

// reaction got cleaned up

// reactions could create reactions...

// reduce

// ref objects should be passed straight through without wrapping

// reject our original promise

// rest of the proto chain must be annotated already

// return the node so it can be chained (e.g. when within callback refs

// reverse by default mutates in place before returning the result

// so that we don't need to depend on findDOMNode() from react-dom.

// so they have had no chance to propagate staleness (#916)

// so use value from _data map (instead of replacement map)

// some deep dependency changed, but don't know if shallow dependency changed

// some leak candidates outstanding.

// something that can be converted and mutated?

// sort by default mutates in place before returning the result

// stage, we might be a component that _started_ to render, but

// state propagation can occur outside of action/reactive context #2195

// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

// suppress the useLayoutEffect warning on server side.

// than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.

// the batch is actually about to finish, all unobserving should happen here.

// there could be a throwing finally block

// this is the prop that gets proxied, so can't replace it!

// this is what makes mobx fast

// this process happens recursively, this computed might be the last observabe of another, etc..

// to allow future observable changes to trigger re-renders

// to check for cycles

// to force it to run at awkward times in unit tests.

// true for autoAction

// true if both NaN, false otherwise

// unique nested structures.

// update the collected properties after react renders.

// used by MST ot get undehanced value

// value might have been changed

// we are not interested in the value *or* exception at this moment, but if there is one, notify all

// we converge to no remaining reactions after a while.

// we have to use forwardRef here because:

// when (and if) useEffect() arrives.

// where the user has an older version of dnd-core like in

// which goes against all good practices. Let's not change the array in place!

// which makes it both a 'derivation' and a 'mutation'.

// will need to recompute when it's needed next.

// will require to check first if UP_TO_DATE or POSSIBLY_STALE

// won't recalculate derivation

// }

//# sourceMappingURL=FinalizationRegistryWrapper.js.map

//# sourceMappingURL=assertEnvironment.js.map

//# sourceMappingURL=createReactionCleanupTrackingUsingFinalizationRegister.js.map

//# sourceMappingURL=createTimerBasedReactionCleanupTracking.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=mobx.esm.js.map

//# sourceMappingURL=observerBatching.js.map

//# sourceMappingURL=printDebugValue.js.map

//# sourceMappingURL=reactionCleanupTracking.js.map

//# sourceMappingURL=shallowequal.esm.js.map

//# sourceMappingURL=staticRendering.js.map

//# sourceMappingURL=useObserver.js.map

//@ts-ignore
