/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic

*/

/*

The MIT License (MIT)

Copyright (c) 2014 Jonathan Ong me@jongleberry.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Definitions from mime-db v1.21.0
For updates check: https://github.com/jshttp/mime-db/blob/master/db.json

*/

/*
      * password-generator ( function )
      * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
      * MIT Licensed
      */

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

/*
  fake.js - generator method for combining faker methods based on string input

*/

/*
  self.categories = function(num) {
      var categories = [];

      do {
          var category = faker.random.arrayElement(faker.definitions.commerce.department);
          if(categories.indexOf(category) === -1) {
              categories.push(category);
          }
      } while(categories.length < num);

      return categories;
  };

  */

/*
  self.mergeCategories = function(categories) {
      var separator = faker.definitions.separator || " &";
      // TODO: find undefined here
      categories = categories || faker.definitions.commerce.categories;
      var commaSeparated = categories.slice(0, -1).join(', ');

      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
  };
  */

/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

/* .MersenneTwister19937 */

/* 2002/01/09 modified by Makoto Matsumoto             */

/* In the previous versions, MSBs of the seed affect   */

/* Period parameters */

/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */

/* Tempering */

/* These real versions are due to Isaku Wada, 2002/01/09 added */

/* a default initial seed is used */

/* constant vector a */

/* constants should be scoped inside the class */

/* divided by 2^32 */

/* divided by 2^32-1 */

/* generate N words at one time */

/* generates a random number on (0,1)-real-interval */

/* generates a random number on [0,0x7fffffff]-interval */

/* generates a random number on [0,0xffffffff]-interval */

/* generates a random number on [0,1) with 53-bit resolution*/

/* generates a random number on [0,1)-real-interval */

/* generates a random number on [0,1]-real-interval */

/* init_key is the array for initializing keys */

/* initialize by an array with array-length */

/* initializes mt[N] with a seed */

/* key_length is its length */

/* least significant r bits */

/* mag01[x] = x * MATRIX_A  for x=0,1 */

/* most significant w-r bits */

/* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */

/* mti==N+1 means mt[N] is not initialized */

/* only MSBs of the array mt[].                        */

/* slight change for C++, 2004/2/26 */

/* the array for the state vector  */

/**
     * Return a random time zone
     * @method faker.address.timeZone
     */

/**
     * Returns a string, containing UTF-16 chars between 33 and 125 ('!' to '}')
     *
     *
     * @method faker.datatype.string
     * @param { number } length: length of generated string, default = 10, max length = 2^20
     */

/**
     * avatar
     *
     * @method faker.image.lorempicsum.avatar
     */

/**
     * boolean
     *
     * @method faker.datatype.boolean
     */

/**
     * genre
     *
     * @method faker.music.genre
     */

/**
     * hexaDecimal
     *
     * @method faker.datatype.hexaDecimal
     * @param {number} count defaults to 1
     */

/**
     * image
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @method faker.image.lorempicsum.image
     * @description search image from unsplash
     */

/**
     * imageBlurred
     *
     * @param {number} width
     * @param {number} height
     * @param {number} blur 1-10
     * @method faker.image.lorempicsum.imageBlurred
     * @description search blurred image from unsplash
     */

/**
     * imageGrayscaled
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @method faker.image.lorempicsum.imageGrayscaled
     * @description search grayscale image from unsplash
     */

/**
     * imageRandomSeeded
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @param {string} seed
     * @method faker.image.lorempicsum.imageRandomSeeded
     * @description search same random image from unsplash, based on a seed
     */

/**
     * imageUrl
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @param {string} seed
     * @method faker.image.lorempicsum.imageUrl
     */

/**
     * method returns a Date object using a random number of milliseconds since 1. Jan 1970 UTC
     * Caveat: seeding is not working
     *
     * @method faker.datatype.datetime
     * @param {mixed} options, pass min OR max as number of milliseconds since 1. Jan 1970 UTC
     */

/**
     * returns a single random floating-point number based on a max number or range
     *
     * @method faker.datatype.float
     * @param {mixed} options
     */

/**
     * returns a single random number based on a max number or range
     *
     * @method faker.datatype.number
     * @param {mixed} options {min, max, precision}
     */

/**
     * returns an array with values generated by faker.datatype.number and faker.datatype.string
     *
     * @method faker.datatype.array
     * @param { number } length of the returned array
     */

/**
     * returns json object with 7 pre-defined properties
     *
     * @method faker.datatype.json
     */

/**
     * uuid
     *
     * @method faker.datatype.uuid
     */

/**
     * vrm
     *
     * @method faker.vehicle.vrm
     */

/**
    * parse string patterns in a similar way to RegExp
    *
    * e.g. "#{3}test[1-5]" -> "###test4"
    *
    * @method faker.helpers.regexpStyleStringParse
    * @param {string} string
    */

/**
   *  direction
   *
   * @method faker.address.direction
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * @Deprecated
   * hexaDecimal
   *
   * @method faker.random.hexaDecimal
   * @param {number} count defaults to 1
   */

/**
   * @Deprecated
   * returns a single random floating-point number based on a max number or range
   *
   * @method faker.random.float
   * @param {mixed} options
   */

/**
   * @Deprecated
   * returns a single random number based on a max number or range
   *
   * @method faker.random.number
   * @param {mixed} options {min, max, precision}
   */

/**
   * @Deprecated
   * uuid
   *
   * @method faker.random.uuid
   */

/**
   * Credit card CVV
   * @method faker.finance.creditCardCVV
  */

/**
   * Credit card number
   * @method faker.finance.creditCardNumber
   * @param {string} provider | scheme
  */

/**
   * Generates a random localized city name. The format string can contain any
   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
   * order to build the city name.
   *
   * If no format string is provided one of the following is randomly used:
   *
   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
   * * `{{address.cityPrefix}} {{name.firstName}}`
   * * `{{name.firstName}}{{address.citySuffix}}`
   * * `{{name.lastName}}{{address.citySuffix}}`
   * * `{{address.cityName}}` when city name is available
   *
   * @method faker.address.city
   * @param {String} format
   */

/**
   * Generates random zipcode from format. If format is not specified, the
   * locale's zip format is used.
   *
   * @method faker.address.zipCode
   * @param {String} format
   */

/**
   * Generates random zipcode from state abbreviation. If state abbreviation is
   * not specified, a random zip code is generated according to the locale's zip format.
   * Only works for locales with postcode_by_state definition. If a locale does not
   * have a postcode_by_state definition, a random zip code is generated according
   * to the locale's zip format.
   *
   * @method faker.address.zipCodeByState
   * @param {String} state
   */

/**
   * Generator method for combining faker methods based on string input
   *
   * __Example:__
   *
   * ```
   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
   * //outputs: "Marks, Dean Sr."
   * ```
   *
   * This will interpolate the format string with the value of methods
   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
   * and [name.suffix]{@link faker.name.suffix}
   *
   * @method faker.fake
   * @param {string} str
   */

/**
   * Return a random localized city prefix
   * @method faker.address.cityPrefix
   */

/**
   * Return a random localized city suffix
   *
   * @method faker.address.citySuffix
   */

/**
   * Returns a random city name
   * 
   * @method faker.address.cityName
   */

/**
   * Returns a random localized street address
   *
   * @method faker.address.streetAddress
   * @param {Boolean} useFullAddress
   */

/**
   * Returns a random localized street name
   *
   * @method faker.address.streetName
   */

/**
   * abbreviation
   *
   * @method faker.hacker.abbreviation
   */

/**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.abstract
   */

/**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.abstract
   */

/**
   * account
   *
   * @method faker.finance.account
   * @param {number} length
   */

/**
   * accountName
   *
   * @method faker.finance.accountName
   */

/**
   * adjective
   *
   * @method faker.hacker.adjective
   */

/**
   * alpha. returns lower/upper alpha characters based count and upcase options
   *
   * @method faker.random.alpha
   * @param {mixed} options // defaults to { count: 1, upcase: false, bannedChars: [] }
   */

/**
   * alphaNumeric
   *
   * @method faker.random.alphaNumeric
   * @param {number} count defaults to 1
   * {mixed} options // defaults to { bannedChars: [] }
   * options.bannedChars - array of characters which should be banned in new string
   */

/**
   * amount
   *
   * @method faker.finance.amount
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */

/**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.animals
   */

/**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.animals
   */

/**
   * avatar
   *
   * @method faker.image.avatar
   */

/**
   * avatar
   *
   * @method faker.image.lorempixel.avatar
   */

/**
   * avatar
   *
   * @method faker.image.unsplash.avatar
   */

/**
   * avatar
   *
   * @method faker.internet.avatar
   */

/**
   * backward-compatibility
   *
   * @method faker.helpers.randomize
   * @param {array} array
   */

/**
   * bear  
   *
   * @method faker.animal.bear
   */

/**
   * between
   *
   * @method faker.date.between
   * @param {date} from
   * @param {date} to
   */

/**
   * betweens
   *
   * @method faker.date.between
   * @param {date} from
   * @param {date} to
   */

/**
   * bic
   *
   * @method  faker.finance.bic
   */

/**
   * bird
   *
   * @method faker.animal.bird
   */

/**
   * bitcoinAddress
   *
   * @method  faker.finance.bitcoinAddress
   */

/**
   * boolean
   *
   * @method faker.random.boolean
   */

/**
   * branch
   *
   * @method faker.git.branch
   */

/**
   * bs
   *
   * @method faker.company.bs
   */

/**
   * bsAdjective
   *
   * @method faker.company.bsAdjective
   */

/**
   * bsBuzz
   *
   * @method faker.company.bsBuzz
   */

/**
   * bsNoun
   *
   * @method faker.company.bsNoun
   */

/**
   * buildings
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.buildings
   */

/**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.business
   */

/**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.business
   */

/**
   * cardinal direction
   *
   * @method faker.address.cardinalDirection
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * cat
   *
   * @method faker.animal.cat
   */

/**
   * catchPhrase
   *
   * @method faker.company.catchPhrase
   */

/**
   * catchPhraseAdjective
   *
   * @method faker.company.catchPhraseAdjective
   */

/**
   * catchPhraseDescriptor
   *
   * @method faker.company.catchPhraseDescriptor
   */

/**
   * catchPhraseNoun
   *
   * @method faker.company.catchPhraseNoun
   */

/**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.cats
   */

/**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.cats
   */

/**
   * cetacean  
   *
   * @method faker.animal.cetacean
   */

/**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.city
   */

/**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.city
   */

/**
   * collation
   *
   * @method faker.database.collation
   */

/**
   * color
   *
   * @method faker.commerce.color
   */

/**
   * color
   *
   * @method faker.internet.color
   * @param {number} baseRed255
   * @param {number} baseGreen255
   * @param {number} baseBlue255
   */

/**
   * color
   *
   * @method faker.vehicle.color
   */

/**
   * column
   *
   * @method faker.database.column
   */

/**
   * commitEntry
   *
   * @method faker.git.commitEntry
   * @param {object} options
   */

/**
   * commitMessage
   *
   * @method faker.git.commitMessage
   */

/**
   * commitSha
   *
   * @method faker.git.commitSha
   */

/**
   * commonFileName
   *
   * @method faker.system.commonFileName
   * @param {string} ext
   */

/**
   * companyName
   *
   * @method faker.company.companyName
   * @param {string} format
   */

/**
   * companySuffix
   *
   * @method faker.company.companySuffix
   */

/**
   * contextualCard
   *
   * @method faker.helpers.contextualCard
   */

/**
   * country
   *
   * @method faker.address.country
   */

/**
   * countryCode
   *
   * @method faker.address.countryCode
   * @param {string} alphaCode default alpha-2
   */

/**
   * county
   *
   * @method faker.address.county
   */

/**
   * cow 
   *
   * @method faker.animal.cow
   */

/**
   * createCard
   *
   * @method faker.helpers.createCard
   */

/**
   * createTransaction
   *
   * @method faker.helpers.createTransaction
   */

/**
   * crocodilia
   *
   * @method faker.animal.crocodilia
   */

/**
   * currencyCode
   *
   * @method faker.finance.currencyCode
   */

/**
   * currencyName
   *
   * @method faker.finance.currencyName
   */

/**
   * currencySymbol
   *
   * @method faker.finance.currencySymbol
   */

/**
   * dataUri
   *
   * @param {number} width
   * @param {number} height
   * @param {string} color
   * @method faker.image.dataUri
   */

/**
   * department
   *
   * @method faker.commerce.department
   */

/**
   * description
   *
   * @method  faker.finance.transactionDescription
   */

/**
   * dog
   *
   * @method faker.animal.dog
   */

/**
   * domainName
   *
   * @method faker.internet.domainName
   */

/**
   * domainSuffix
   *
   * @method faker.internet.domainSuffix
   */

/**
   * domainWord
   *
   * @method faker.internet.domainWord
   */

/**
   * email
   *
   * @method faker.internet.email
   * @param {string} firstName
   * @param {string} lastName
   * @param {string} provider
   */

/**
   * engine
   *
   * @method faker.database.engine
   */

/**
   * ethereumAddress
   *
   * @method  faker.finance.ethereumAddress
   */

/**
   * exampleEmail
   *
   * @method faker.internet.exampleEmail
   * @param {string} firstName
   * @param {string} lastName
   */

/**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.fashion
   */

/**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.fashion
   */

/**
   * fileExt
   *
   * @method faker.system.fileExt
   * @param {string} mimeType
   */

/**
   * findName
   *
   * @method findName
   * @param {string} firstName
   * @param {string} lastName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * firstName
   *
   * @method firstName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * fish
   *
   * @method faker.animal.fish
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.food
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.food
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.food
   */

/**
   * fuel
   *
   * @method faker.vehicle.fuel
   */

/**
   * future
   *
   * @method faker.date.future
   * @param {number} years
   * @param {date} refDate
   */

/**
   * gender
   *
   * @method gender
   * @memberof faker.name
   */

/**
   * generates a file name
   *
   * @method faker.system.fileName
   */

/**
   * generates a space separated list of words
   *
   * @method faker.lorem.words
   * @param {number} num number of words, defaults to 3
   */

/**
   * generates a word of a specified length
   *
   * @method faker.lorem.word
   * @param {number} length length of the word that should be returned. Defaults to a random length
   */

/**
   * horse 
   *
   * @method faker.animal.horse
   */

/**
   * iban
   *
   * @param {boolean} [formatted=false] - Return a formatted version of the generated IBAN.
   * @param {string} [countryCode] - The country code from which you want to generate an IBAN, if none is provided a random country will be used.
   * @throws Will throw an error if the passed country code is not supported.
   *
   * @method  faker.finance.iban
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.image
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.image
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.image
   * @description search image from unsplash
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.imageUrl
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.lorempixel.imageUrl
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {string} keyword
   * @method faker.image.unsplash.imageUrl
   */

/**
   * ingverb
   *
   * @method faker.hacker.ingverb
   */

/**
   * insect  
   *
   * @method faker.animal.insect
   */

/**
   * ip
   *
   * @method faker.internet.ip
   */

/**
   * ipv6
   *
   * @method faker.internet.ipv6
   */

/**
   * jobArea
   *
   * @method jobArea
   * @memberof faker.name
   */

/**
   * jobDescriptor
   *
   * @method jobDescriptor
   * @memberof faker.name
   */

/**
   * jobTitle
   *
   * @method jobTitle
   * @memberof faker.name
   */

/**
   * jobType
   *
   * @method jobType
   * @memberof faker.name
   */

/**
   * lastName
   *
   * @method lastName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * latitude
   *
   * @method faker.address.latitude
   * @param {Double} max default is 90
   * @param {Double} min default is -90
   * @param {number} precision default is 4
   */

/**
   * lion  
   *
   * @method faker.animal.lion
   */

/**
   * locale
   *
   * @method faker.random.image
   */

/**
   * locale
   *
   * @method faker.random.locale
   */

/**
   * longitude
   *
   * @method faker.address.longitude
   * @param {Double} max default is 180
   * @param {Double} min default is -180
   * @param {number} precision default is 4
   */

/**
   * mac
   *
   * @method faker.internet.mac
   * @param {string} sep
   */

/**
   * manufacturer
   *
   * @method faker.vehicle.manufacturer
   */

/**
   * mask
   *
   * @method faker.finance.mask
   * @param {number} length
   * @param {boolean} parens
   * @param {boolean} ellipsis
   */

/**
   * method
   *
   * @method faker.internet.httpMethod
   */

/**
   * middleName
   *
   * @method middleName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * mimeType
   *
   * @method faker.system.mimeType
   */

/**
   * model
   *
   * @method faker.vehicle.model
   */

/**
   * month
   *
   * @method faker.date.month
   * @param {object} options
   */

/**
   * mustache
   *
   * @method faker.helpers.mustache
   * @param {string} str
   * @param {object} data
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.nature
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nature
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.nature
   */

/**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.nightlife
   */

/**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nightlife
   */

/**
   * noun
   *
   * @method faker.hacker.noun
   */

/**
   * objects
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.objects
   */

/**
   * ordinal direction
   *
   * @method faker.address.ordinalDirection
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * paragraph
   *
   * @method faker.lorem.paragraph
   * @param {number} sentenceCount defaults to 3
   */

/**
   * paragraphs
   *
   * @method faker.lorem.paragraphs
   * @param {number} paragraphCount defaults to 3
   * @param {string} separator defaults to `'\n \r'`
   */

/**
   * parses string for a symbol and replace it with a random number from 1-10
   *
   * @method faker.helpers.replaceSymbolWithNumber
   * @param {string} string
   * @param {string} symbol defaults to `"#"`
   */

/**
   * parses string for symbols (numbers or letters) and replaces them appropriately (# will be replaced with number,
   * ? with letter and * will be replaced with number or letter)
   *
   * @method faker.helpers.replaceSymbols
   * @param {string} string
   */

/**
   * password
   *
   * @method faker.internet.password
   * @param {number} len
   * @param {boolean} memorable
   * @param {string} pattern
   * @param {string} prefix
   */

/**
   * past
   *
   * @method faker.date.past
   * @param {number} years
   * @param {date} refDate
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.people
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.people
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.people
   */

/**
   * phoneFormats
   *
   * @method faker.phone.phoneFormats
   */

/**
   * phoneNumber
   *
   * @method faker.phone.phoneNumber
   * @param {string} format
   * @memberOf faker.phone
   */

/**
   * phoneNumberFormat
   *
   * @method faker.phone.phoneFormatsArrayIndex
   * @param phoneFormatsArrayIndex
   * @memberOf faker.phone
   */

/**
   * phrase
   *
   * @method faker.hacker.phrase
   */

/**
   * port
   * 
   * @method faker.internet.port
   */

/**
   * prefix
   *
   * @method prefix
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * price
   *
   * @method faker.commerce.price
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */

/**
   * product
   *
   * @method faker.commerce.product
   */

/**
   * productAdjective
   *
   * @method faker.commerce.productAdjective
   */

/**
   * productDescription
   *
   * @method faker.commerce.productDescription
   */

/**
   * productMaterial
   *
   * @method faker.commerce.productMaterial
   */

/**
   * productName
   *
   * @method faker.commerce.productName
   */

/**
   * protocol
   *
   * @method faker.internet.protocol
   */

/**
   * rabbit 
   *
   * @method faker.animal.rabbit
   */

/**
   * randomWords
   *
   * @method faker.random.words
   * @param {number} count defaults to a random value between 1 and 3
   */

/**
   * recent
   *
   * @method faker.date.recent
   * @param {number} days
   * @param {date} refDate
   */

/**
   * recent
   *
   * @method faker.time.recent
   * @param {string} outputType - 'abbr' || 'wide' || 'unix' (default choice)
   */

/**
   * replace symbols in a credit card schems including Luhn checksum
   *
   * @method faker.helpers.replaceCreditCardSymbols
   * @param {string} string
   * @param {string} symbol
   */

/**
   * returns a commonly used file extension
   *
   * @method faker.system.commonFileExt
   */

/**
   * returns a commonly used file type
   *
   * @method faker.system.commonFileType
   */

/**
   * returns any file type available as mime-type
   *
   * @method faker.system.fileType
   */

/**
   * returns directory path
   *
   * @method faker.system.directoryPath
   */

/**
   * returns file path
   *
   * @method faker.system.filePath
   */

/**
   * returns lines of lorem separated by `'\n'`
   *
   * @method faker.lorem.lines
   * @param {number} lineCount defaults to a random number between 1 and 5
   */

/**
   * returns random text based on a random lorem method
   *
   * @method faker.lorem.text
   * @param {number} times
   */

/**
   * routingNumber
   *
   * @method faker.finance.routingNumber
   */

/**
   * secondaryAddress
   *
   * @method faker.address.secondaryAddress
   */

/**
   * semver
   *
   * @method faker.system.semver
   */

/**
   * sentence
   *
   * @method faker.lorem.sentence
   * @param {number} wordCount defaults to a random number between 3 and 10
   * @param {number} range
   */

/**
   * sentences
   *
   * @method faker.lorem.sentences
   * @param {number} sentenceCount defautls to a random number between 2 and 6
   * @param {string} separator defaults to `' '`
   */

/**
   * shortSha
   *
   * @method faker.git.shortSha
   */

/**
   * slug
   *
   * @method faker.lorem.slug
   * @param {number} wordCount number of words, defaults to 3
   */

/**
   * slugifies string
   *
   * @method faker.helpers.slugify
   * @param {string} string
   */

/**
   * snake  
   *
   * @method faker.animal.snake
   */

/**
   * soon
   *
   * @method faker.date.soon
   * @param {number} days
   * @param {date} refDate
   */

/**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.sports
   */

/**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.sports
   */

/**
   * state
   *
   * @method faker.address.state
   * @param {Boolean} useAbbr
   */

/**
   * stateAbbr
   *
   * @method faker.address.stateAbbr
   */

/**
   * streetPrefix
   *
   * @method faker.address.streetPrefix
   */

/**
   * streetSuffix
   *
   * @method faker.address.streetSuffix
   */

/**
   * suffix
   *
   * @method suffix
   * @memberof faker.name
   */

/**
   * suffixes
   *
   * @method faker.company.suffixes
   */

/**
   * takes an array and randomizes it in place then returns it
   * 
   * uses the modern version of the Fisher–Yates algorithm
   *
   * @method faker.helpers.shuffle
   * @param {array} o
   */

/**
   * takes an array and returns a random element of the array
   *
   * @method faker.random.arrayElement
   * @param {array} array
   */

/**
   * takes an array and returns a subset with random elements of the array
   *
   * @method faker.random.arrayElements
   * @param {array} array
   * @param {number} count number of elements to pick
   */

/**
   * takes an object and returns a random key or value
   *
   * @method faker.random.objectElement
   * @param {object} object
   * @param {mixed} field
   */

/**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.technics
   */

/**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.technics
   */

/**
   * technology
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.technology
   */

/**
   * title
   *
   * @method title
   * @memberof faker.name
   */

/**
   * transactionType
   *
   * @method faker.finance.transactionType
   */

/**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.transport
   */

/**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.transport
   */

/**
   * type
   *
   * @method faker.database.type
   */

/**
   * type
   *
   * @method faker.vehicle.type
   */

/**
   * type 
   *
   * @method faker.animal.type
   */

/**
   * unique
   *
   * @method unique
   */

/**
   * url
   *
   * @method faker.internet.url
   */

/**
   * userAgent
   *
   * @method faker.internet.userAgent
   */

/**
   * userCard
   *
   * @method faker.helpers.userCard
   */

/**
   * userName
   *
   * @method faker.internet.userName
   * @param {string} firstName
   * @param {string} lastName
   */

/**
   * vehicle
   *
   * @method faker.vehicle.vehicle
   */

/**
   * verb
   *
   * @method faker.hacker.verb
   */

/**
   * vin
   *
   * @method faker.vehicle.vin
   */

/**
   * weekday
   *
   * @param {object} options
   * @method faker.date.weekday
   */

/**
   * word
   *
   * @method faker.random.word
   * @param {string} type
   */

/**
  * bicycle
  *
  * @method faker.vehicle.bicycle
  */

/**
 *
 * @namespace faker
 */

/**
 *
 * @namespace faker.address
 */

/**
 *
 * @namespace faker.datatype
 */

/**
 *
 * @namespace faker.internet
 */

/**
 *
 * @namespace faker.name
 */

/**
 *
 * @namespace faker.random
 */

/**
 *
 * @namespace faker.system
 */

/**
 *
 * @namespace faker.unique
 */

/**
 * Method to reduce array of characters
 * @param arr existing array of characters
 * @param values array of characters which should be removed
 * @return {*} new array without banned characters
 */

/**
 * litecoinAddress
 *
 * @method  faker.finance.litecoinAddress
 */

/** string repeat helper, alternative to String.prototype.repeat.... See PR #382
   *
   * @method faker.helpers.repeatString
   * @param {string} string
   * @param {number} num
   */

/***/

//

//  Export the twister class

//  Exports: Public API

// 5018 xxxx xxxx xxxx xxL

// 9/2018 - Added faker random to ensure mersenne and seed

// Azerbaijan

// BBAN 2c,16n

// Choose a random provider

// Create a Getter for all definitions.foo.bar properties

// Credit cards are in a object structure

// Deal with range `[min-max]` (only works with numbers for now)

// Deal with range repeat `{min,max}`

// Deal with repeat `{num}`

// Don't want the source array exposed to modification, so return a copy

// FIXME: this is strange passing in an array index.

// GEkk bbbb cccc cccc cccc cccc cccc

// If anyone actually needs to optimize this specific code path, please open a support issue on github

// If parameters are populated here, they are always going to be of string type

// If there is no coordinate, the best we can do is return a random GPS coordinate.

// It is used to specify a word in context, which may differ from a stand-alone word

// Keep longitude in range [-180, 180]

// Length 28

// Make the range inclusive of the max value

// Modules 10 straight summation.

// Note: we experience a small performance hit here due to JSON.parse try / catch

// Possibly include param to function that allows user to choose between distributions.

// Property "abbr_context" is optional, if not set then "abbr" will be used instead

// Property "wide_context" is optional, if not set then "wide" will be used instead

// Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)

// Romanian

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847

// Source: https://unicode.org/cldr/trac/browser/trunk/common/main/pt.xml?rev=14409#L1811

// Source: https://unicode.org/cldr/trac/browser/trunk/common/main/pt_PT.xml?rev=14409#L491

// TODO: change all these methods that accept a boolean to instead accept an options hash.

// TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc

// TODO: implement either a gaussian/uniform distribution of points in cicular region.

// The user chose an optional scheme

// There chould be multiple formats

// This approach will likely result in a higher density of points near the center.

// This time we are not capturing the char before `[]`

// Use a user provided seed if it is an array or number

// Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01

// an almost straight conversion from the original program, mt19937ar.c,

// and modified a little at july 20, 2006, but there are not any substantial differences.

// assign options

// assign the function from the module.function namespace

// b = National bank code (alpha)

// based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette

// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.

// c = Account number

// common error handler for messages

// console.log('attempting to parse', str);

// console.log('conflict', result);

// console.log(now - startTime)

// currently uniqueness is global to entire faker instance

// default symbol is '#'

// default values required for calling method without arguments

// example IBAN AZ21 NABZ 0000 0000 1370 1000 1944

// execute the provided method to find a potential satifised value

// extract method name from between the {{ }} that we found

// find first matching {{ and }}

// for example: {{name.firstName}}

// generates fake data for many computer systems properties

// global results store

// https://transferwise.com/fr/iban/azerbaijan

// if (typeof range == 'undefined') { range = 7; }

// if incoming str parameter is not provided, return error message

// if no {{ and }} is found, we are done

// if the client passed in a different separator than `:`, 

// if the result has not been previously found, add it to the found array and return the value as it's unique

// if zip format is not specified, use the zip format defined for the locale

// in particular locales first and last names split by gender,

// in this program, procedure descriptions and comments of original source code were not removed.

// it's possible in the future that some users may want to scope found per function call instead of faker instance

// lines commented with /* and */ are original comments.

// lines commented with // are additional comments in this JavaScript version.

// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.

// randomly pick from the many faker methods that can generate words

// replace ### with random numbers

// replace [4-9] with a random number in range etc...

// return the response recursively until we are done finding all tags

// see above comment of firstName method

// shortcut if Array.from is available

// since JSON.parse threw an error, assume parameters was actually a string

// since we are requiring the top level of faker, load all locales by default

// since we might actually be dealing with an object or array,

// some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,

// some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian

// some time from now to N days ago, in milliseconds

// some time from now to N days later, in milliseconds

// some time from now to N years ago, in milliseconds

// some time from now to N years later, in milliseconds

// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799

// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734

// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825

// split the method into module and function

// strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back

// support single exclude argument as string

// switch min and max

// the `unique` module

// there chould be multiple formats

// these names are taken from the list of most popular names in 2019 for boys: https://www.svbkindernamen.nl/int/nl/kindernamen/wizard/zoeknaam/jongensnamen/jongens_alfabetisch.html

// these names are taken from the list of most popular names in 2019 for girls: https://www.svbkindernamen.nl/int/nl/kindernamen/wizard/zoeknaam/meisjesnamen/meisjes_alfabetisch.html

// this means that faker should currently *never* return duplicate values across all API methods when using `Faker.unique`

// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,

// thus we keep consistency by passing 0 as male and 1 as female

// time the script started

// translated by y. okada on July 17, 2006.

// var startTime = 0;

// we always attempt to the parse the incoming parameters into JSON

// we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )

// we will use it if it is in the list of acceptable separators (dash or no separator)

//Fall back to non-gendered names if they exist and gender wasn't specified

//NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

//TODO: add a ranged date method

//TODO: implement for letters e.g. [0-9a-zA-Z] etc.

//c//	+ init_key[j] + j; /* non linear */

//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */

//c//#define M 397

//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */

//c//#define N 624

//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */

//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);

//c//- i; /* non linear */

//c//double genrand_real1(void)

//c//double genrand_real2(void)

//c//double genrand_real3(void)

//c//double genrand_res53(void)

//c//init_genrand(19650218);

//c//int i, j, k;

//c//int kk;

//c//long genrand_int31(void)

//c//mt[0]= s & 0xffffffff;

//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */

//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))

//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))

//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[mti] &= 0xffffffff;

//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);

//c//return (genrand_int32()>>1);

//c//return genrand_int32()*(1.0/4294967295.0);

//c//return genrand_int32()*(1.0/4294967296.0);

//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */

//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};

//c//static unsigned long mt[N]; /* the array for the state vector  */

//c//unsigned long genrand_int32(void)

//c//unsigned long y;

//c//void init_by_array(unsigned long init_key[], int key_length)

//c//void init_genrand(unsigned long s)

//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

//c//y ^= (y << 15) & 0xefc60000;

//c//y ^= (y << 7) & 0x9d2c5680;

//c//y ^= (y >> 11);

//c//y ^= (y >> 18);

//calling rnd() with no arguments is identical to rnd(0, 100)

//console.log(currentIterations)

//create a template for length

//dots = 2 returns .x.y where x & y are between 0 and 9

//generate a random revision

//generate random numbers

//http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx

//http://www.opera.com/docs/history/

//https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference

//min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc

//prefix with ellipsis

//return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

//returns a random element from array (a), even weighting

//returns a random key from the passed object; keys are weighted by the decimal probability in their value

//set defaults
