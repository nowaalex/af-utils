/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* DndContext.Provider */

/* binding */

/* default */

/* eslint-disable no-unused-vars */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* eslint-disable-next-line jsx-a11y/anchor-has-content */

/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* globals self */

/* harmony default export */

/* harmony export */

/* harmony import */

/* import() */

/* invariant */

/* webpack/runtime/css loading */

/* webpack/runtime/jsonp chunk loading */

/* webpack/runtime/load script */

/*#__PURE__*/

/**
             * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
             * @param {Object} bodyAttributes: {"className": "root"}
             * @param {String} defaultTitle: "Default Title"
             * @param {Boolean} defer: true
             * @param {Boolean} encodeSpecialCharacters: true
             * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
             * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
             * @param {Array} meta: [{"name": "description", "content": "Test description"}]
             * @param {Array} noscript: [{"innerHTML": "<img src='http://mysite.com/js/test.js'"}]
             * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
             * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
             * @param {Array} style: [{"type": "text/css", "cssText": "div { display: block; color: blue; }"}]
             * @param {String} title: "Title"
             * @param {Object} titleAttributes: {"itemprop": "name"}
             * @param {String} titleTemplate: "MySite.com - %s"
             */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * Get the root element to use for event subscriptions
     */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Converts `string` to
 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * @static
 * @memberOf _
 * @since 3.1.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the start cased string.
 * @example
 *
 * _.startCase('--foo-bar--');
 * // => 'Foo Bar'
 *
 * _.startCase('fooBar');
 * // => 'Foo Bar'
 *
 * _.startCase('__FOO_BAR__');
 * // => 'FOO BAR'
 */

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Create the React Context
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * Public API for matching a URL pathname to a path.
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for a <Router> that uses HTML5 history.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

/**
 * The public API for matching a single path and rendering.
 */

/**
 * The public API for navigating programmatically with a component.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/** @class */

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Built-in value references. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Used as references for various `Number` constants. */

/** Used for built-in method references. */

/** Used to compose unicode capture groups. */

/** Used to compose unicode character classes. */

/** Used to detect strings that need a more robust regexp to match words. */

/** Used to map Latin Unicode letters to basic Latin letters. */

/** Used to match Latin Unicode letters (excluding mathematical operators). */

/** Used to match words composed of alphanumeric characters. */

/** `Object#toString` result references. */

/************************************************************************/

/******/

/***/

//

//         channel.port2.postMessage(0);

//         setImmediate(callback);

//      if (!b.has(i.value[0])) return false;

//      if (!b.has(i[0])) return false;

//     channel.port1.onmessage = callback;

//     return function requestCall() {

//     var channel = new MessageChannel();

//     };

//    **Note**: `i` access switches to `i.value`.

//    ... and convert to:

//    Basically, take:

//    ```

//    ```js

//    for (i of a.entries())

//    it = a.entries();

//    to co-exist with es5.

//    while (!(i = it.next()).done)

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "drop and blow away the whole document" action.

// - Android 4-4.3

// - Chrome 26-34

// - Firefox 14-29

// - Internet Explorer 11

// - Safari 6-7

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// 0 means "already installed".

// 1. Extra `has<Type> &&` helpers in initial condition allow es6 code

// 2. Replace `for of` with es5 compliant iteration using `for`.

// @ts-ignore

// A hashchange doesn't always == location change.

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// About 1.5x faster than the two-arg version of Array#splice()

// Advance the index before calling the task. This ensures that we will

// Align at the center

// An exception thrown by a task will permanently interrupt the processing of

// Any reducers that existed in both the new and old rootReducer

// Array-as-queue is good enough here, since we are just dealing with exceptions.

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid failures from read-only properties

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/esm/browser/asap.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/esm/browser/raw.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/registry.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/classes/DragDropManagerImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/classes/DragDropMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/classes/HandlerRegistryImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/contracts.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/createDragDropManager.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dragOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dragOperation.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/refCount.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/stateId.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/dirtiness.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/equality.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/matchesType.js

// CONCATENATED MODULE: ../../node_modules/history/esm/history.js

// CONCATENATED MODULE: ../../node_modules/mini-create-react-context/dist/esm/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/HTML5BackendImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/react-icons/lib/esm/iconContext.js

// CONCATENATED MODULE: ../../node_modules/react-icons/lib/esm/iconsManifest.js

// CONCATENATED MODULE: ../../node_modules/react-router-dom/esm/react-router-dom.js

// CONCATENATED MODULE: ../../node_modules/redux/es/redux.js

// CONCATENATED MODULE: ../../node_modules/resolve-pathname/esm/resolve-pathname.js

// CONCATENATED MODULE: ../../node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// CONCATENATED MODULE: ../../node_modules/value-equal/esm/value-equal.js

// CONCATENATED MODULE: ./src/Docs/common/PropsRows/index.js

// CONCATENATED MODULE: ./src/utils/humanizeRoute.js

// Calculate list of tags, giving priority innermost component (end of the propslist)

// Check if module is in cache

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Component.peek comes from react-side-effect:

// Create a new module (and put it into the cache)

// DCE check should happen before ReactDOM bundle executes so that

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Don't publish the source just yet (see why below)

// Don't show a nice cursor but still prevent default

// Don’t use it for anything other than testing.

// Dragging some elements, like <a> and <img> may still behave like a native drag event,

// END: Modifications

// END: fast-deep-equal

// END: react-fast-compare

// EXTERNAL MODULE: ../../node_modules/lodash/startCase.js

// EXTERNAL MODULE: ../../node_modules/path-to-regexp/index.js

// EXTERNAL MODULE: ../../node_modules/prop-types/index.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/esm/core/DndContext.js

// EXTERNAL MODULE: ../../node_modules/react-dom/index.js

// EXTERNAL MODULE: ../../node_modules/react-side-effect/lib/index.js

// EXTERNAL MODULE: ../../node_modules/react/index.js

// Ensure the hash is encoded properly before doing anything else.

// Ensure we always have a properly-encoded hash.

// Equivalent to push, but avoids a function call.

// Even if we were, there is another bug in Internet Explorer 10.

// Execute the module function

// Exit early for strings to avoid a performance hit in some environments.

// Expose canUseDOM so tests can monkeypatch it

// Finally call hover on all matching targets.

// Firefox can dispatch this event in an infinite loop

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox won't drag without setting data

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// For testing, you may use a static peek() method available on the returned component.

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get the draggable source

// Get the source client offset

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, since this timer gets frequently dropped in Firefox

// IE 11 sometimes throws when accessing window.history.state

// IE doesn't support MIME types in setData

// IE requires this to fire dragover events

// If a task throws an exception, `flush` ensures that its state will remain

// If by this time no drag source reacted, tell browser not to drag.

// If child drag source refuses drag but parent agrees,

// If source.beginDrag returns null, this is an indicator to cancel the drag

// If the path exists, push it onto the end.

// If the target changes position as the result of `dragenter`, `dragover` might still

// If we call `asap` within tasks scheduled by `asap`, the queue will

// Ignore already escaped sequences.

// Ignore extraneous popstate events in WebKit.

// Ignore this change; we already setState in push/replace.

// Important!

// In a web browser, exceptions are not fatal. However, to avoid

// In non-strict mode we allow a slash at the end of match. If the path to

// In some cases the user may want to override this behavior, e.g.

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Inputs and textareas should be selectable

// Instead, we just default to 0 for keys we don't know.

// Instead, we just default to 0 for paths we don't know.

// Instead, we periodically shift 1024 tasks off the queue.

// Internal State

// Interpolate

// It also neatly avoids a situation where render() returns null

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It lets you get the current state without resetting the mounted instance stack.

// Iterate over the tokens and create our regexp string.

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// JSONP chunk loading for javascript

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Latin Extended-A block.

// Latin-1 Supplement block.

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Manually shift all values starting at the index back to the

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Mimic the behavior of DOM histories by

// Multiple actions are dispatched here, which is why this doesn't return an action

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// NAMESPACE OBJECT: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// Never forget.

// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

// Once a flush has been requested, no further calls to `requestFlush` are

// One-arg form: push(location)

// Only IE requires us to explicitly say

// Only proceed if we have not handled it already.

// Otherwise, if either of them == null they are not equal.

// Preact uses an empty array as children by

// Prepend partial segment prefixes.

// Prevent default "drop and blow away the whole document" action.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Public interface

// Push the current path onto the tokens.

// RawTasks are recycled to reduce GC churn.

// React 15 compat

// React v16.11 and below

// React v16.12 and above

// React-Dnd Components

// Rearrange xs and ys so that xs is sorted

// Receiving a mouse event in the middle of a dragging operation

// Recursively convert values (susceptible to call stack limits).

// Remove a duplicate tag from domTagstoRemove, so it isn't cleared.

// Remove those targetIds that don't match the targetType.  This

// Resolve incomplete/relative pathname relative to current location.

// Return false from a transition hook to cancel the transition.

// Return the exports of the module

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// START: Modifications:

// START: fast-deep-equal

// START: fast-deep-equal es6/index.js 3.1.1

// START: react-fast-compare

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// See https://github.com/ReactTraining/history/pull/289

// See:

// Show user-specified drop effect.

// Special case for innerHTML which doesn't work lowercased

// Special rule with link tags, since rel and href are both primary tags, rel takes priority

// Stop the default behavior when we're not expecting a native item to be dropped.

// Store drag source node so we can check whether

// TODO: If another transition starts while we're still confirming

// TODO: We could probably make this more reliable by

// TODO: if we ever make a react-native version of this,

// Test for strict equality first.

// The browsers will use the image intrinsic size under different conditions.

// The chunk loading function for additional chunks

// The flush function processes all tasks that have been scheduled with

// The message channel technique was discovered by Malte Ubl and was the

// The module cache

// The require function

// The rightmost point in the dataset should give an exact result

// They are implemented in all modern browsers.

// This action has a similiar effect to ActionTypes.INIT.

// This allows the user to escape special characters that won't transform.

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This file contains only the entry chunk.

// This function allow to reference all chunks

// This function allow to reference async chunks

// This hook exists purely for testing purposes.

// This implementation is based heavily on node's url.parse

// This is a bit of a hack. We have to start listening for location

// This is for `asap.js` only.

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is probably a native item type we don't understand.

// This is the reason such behavior is strictly opt-in.

// This is useful to prevent an error thrown in a task from stalling the event

// Try to use displayName of wrapped component

// Two-arg form: push(path, state)

// Update seen tags with tags from this instance

// Use a negative lookahead to match only capturing groups.

// Use custom drag image if user specifies it.

// Use the fastest means possible to execute a task in its own turn, with

// Usually we want to publish it in the next tick so that browser

// Verify that the code above has been dead code eliminated (DCE'd).

// We can't use window.location.hash here because it's not

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

// We dispatch a timeout with a specified delay of 0 for engines that

// We don't expect any of the above to throw, but better to be safe.

// We need to wait before we start listening for mousemove events.

// We queue errors to ensure they are thrown in right order (FIFO).

// We should still report in case we break this code.

// We use React.Children.forEach instead of React.Children.toArray().find()

// We wrap tasks with recyclable task objects.  A task object implements

// We'll have to wait for @3x to see if this is entirely correct

// When a store is created, an "INIT" action is dispatched so that every

// When rendering in a static context,

// When there is no prior location and pathname is empty, set it to /

// When using a custom drag layer, the only way to prevent

// Whichever timer succeeds will cancel both timers and

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// `call`, just like a function.

// `process.on("uncaughtException")` or by a domain.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// a Promise means "currently loading".

// all chunks have JS

// all other properties should be traversed as usual

// an event 20 times per second until it succeeds.

// and height. In this case, though, returning null from render()

// and optional suffixes. Matches appear as:

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// assigning into an array to define toString function on it

// avoid mem leaks in IE.

// avoid mem leaks.

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// best way to handle this.

// between events.

// browsers give this different errors name and messages:

// call `rawAsap.requestFlush` if an exception is thrown.

// can reliably accommodate that request. This will usually be snapped

// causing a render after a cancelled POP.

// changes here in the constructor in case there are any <Redirect>s

// cheap lodash replacements

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// closure.

// component at different URLs.

// consistent across browsers - Firefox will pre-decode it!

// consistent and will resume where it left off when called again.

// create error before stack unwound to get useful stacktrace later

// custom handling for DOM elements

// custom handling for React/Preact

// default, so use null if that's the case.

// define __esModule on exports

// define getter functions for harmony exports

// depends on its existence.

// don't hoist over string (html) components

// dragenter handler.

// edge: "Error", "Out of stack space"

// either ensure that no exceptions are thrown from your task, or to manually

// empty

// end fast-deep-equal

// eslint-disable-line no-alert

// eslint-disable-line no-new-wrappers

// eslint-disable-next-line no-console

// even if the current drag event matches a user-defined type.

// even then.

// events in browsers.

// every available SauceLabs Selenium web driver worker at time of writing.

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// execute the callback.

// expose the modules object (__webpack_modules__)

// firefox: "InternalError", too much recursion"

// fixes shallow isOver which would only be non-shallow because of

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// get a new location before the <Router> is mounted.

// get dispatched despite target being no longer there. The easy solution is to check

// getDefaultExport function for compatibility with non-harmony modules

// grow, but to avoid an O(n) walk for every task we execute, we don't

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// here because toArray adds keys to all child elements and we do not want

// http://fb.me/prop-types-in-prod

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// if dragend handler does something like showing an alert.

// ignore everything but left clicks

// immediately in some browsers.

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// in the same tick for the source element, and browser freaks out.

// install a JSONP callback for chunk loading

// is able to screenshot the current (not yet dragging) state.

// is that other hash histories in the page will consider it a POP.

// is to add a scroll event listener that calls for a flush.

// is valid at the end of a path match, not in the middle. This is important

// it is removed from DOM and trigger endDrag manually.

// its existence.

// keeping a list of keys we've seen in sessionStorage.

// keeping a list of paths we've seen in sessionStorage.

// loadScript function to load a script via script tag

// lower priority turn.

// match already ends with a slash, we remove it for consistency. The slash

// means it has ended and the drag source node disappeared from DOM,

// memoized from props

// mutation observers, so that implementation is used instead.

// necessary until the next `flush` completes.

// no HMR

// no HMR manifest

// no baseURI

// no module.id needed

// no module.loaded needed

// no on chunks loaded

// no prefetching

// no preloaded

// non-matching targets.

// object to store loaded and loading chunks

// on the initial render. If there are, they will replace/push when

// onClick prevented default

// original foundation for this library.

// page's first load. Thankfully, this version of Safari supports

// priority over other events including IO, animation, reflow, and redraw

// provide fallback if mappedState is undefined

// public for test

// queue if the exception handled by Node.js’s

// rather setState here and ignore the hashchange. The caveat here

// rawAsap provides everything we need except exception management.

// reducer returns their initial state. This effectively populates

// reliably everywhere they are implemented.

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// set the new location immediately.

// setup Promise in chunk cache

// shift tasks off the queue after they have been executed.

// slowing down the queue of pending tasks, we rethrow the error in a

// so the browser didn't dispatch the dragend event.

// some other error. we should definitely know about these

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// start chunk loading

// subsequent tasks. The higher level `asap` function ensures that if an

// the default drag preview from drawing in IE is to screenshot

// the dragging state in which the node itself has zero opacity

// the initial state tree.

// the matched portion of the URL

// the new state tree with any relevant data from the old one.

// the path used to match

// the previous one, we may end up in a weird state. Figure out the

// they mount and since cDM fires in children before parents, we may

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to enable drag and drop

// to is absolute

// to is relative, drop the filename

// to the result

// to trigger an unmount/remount for two <Route>s that render the same

// to work around IE not supporting custom drag previews.

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// undefined on initial render

// under any circumstances.

// use function arg to avoid need to escape $ characters

// use parent's node as drag image. Neither works in IE though.

// warn on circular references, don't crash

// we don't care about invariant's own frame

// we want drag drop operation to start

// we'll need to consider how to pull off dev-tooling

// webpackBootstrap

// whether or not we matched exactly

// whether there actually is a target before firing `hover`.

// will abruptly end the dragging, which is not obvious.

// will receive the previous state. This effectively populates

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// }

//# sourceMappingURL=invariant.esm.js.map
