{"version":3,"file":"a1ef0576ee46b24f19cf.js","mappings":"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","sources":["webpack://website/../af-react-table/lib/index.esm.js","webpack://website/./src/examples/complexTable(unstable)/basic/index.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useState, useEffect, createElement, Fragment } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { makeObservable, computed, comparer, action } from 'mobx';\nimport { cx, Table } from 'af-virtual-scroll';\nimport { useDrop, useDrag } from 'react-dnd';\nimport { jsxs, jsx } from 'react/jsx-runtime';\n\nconst multiGroupBy = (indexesArray, groupDataKeysList, getRowData, priorityGroupValuesArray) => {\n  const lastGroupIndex = groupDataKeysList.length - 1;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (lastGroupIndex < 0) {\n      throw new Error(\"lastGroupIndex < 0\");\n    }\n  }\n\n  const lastGroupDataKey = groupDataKeysList[lastGroupIndex];\n  const groupsMap = new Map();\n\n  for (let rowIndex of indexesArray) {\n    /*\n        It is better to start from indexes iteration, not from groups, to minimize getRowData calls\n    */\n    const row = getRowData(rowIndex);\n\n    if (!row) {\n      continue;\n    }\n\n    let innerObject = groupsMap,\n        tmpInnerObject,\n        cellValue;\n    /*\n        We could put everything in one loop, but last iteration is different.\n    */\n\n    for (let i = 0; i < lastGroupIndex; i++) {\n      cellValue = row[groupDataKeysList[i]];\n      tmpInnerObject = innerObject.get(cellValue);\n\n      if (!tmpInnerObject) {\n        tmpInnerObject = new Map();\n\n        for (let priorityValue of priorityGroupValuesArray[i]) {\n          if (!innerObject.has(priorityValue)) {\n            innerObject.set(priorityValue, null);\n          }\n        }\n\n        innerObject.set(cellValue, tmpInnerObject);\n      }\n\n      innerObject = tmpInnerObject;\n    }\n\n    cellValue = row[lastGroupDataKey];\n    tmpInnerObject = innerObject.get(cellValue);\n\n    if (tmpInnerObject) {\n      tmpInnerObject.push(rowIndex);\n    } else {\n      for (let priorityValue of priorityGroupValuesArray[lastGroupIndex]) {\n        if (!innerObject.has(priorityValue)) {\n          innerObject.set(priorityValue, null);\n        }\n      }\n\n      innerObject.set(cellValue, [rowIndex]);\n    }\n  }\n\n  return groupsMap;\n};\n\nconst collator = new Intl.Collator(undefined, {\n  numeric: true\n});\n\nconst getSorter = (getRowData, sortDataKey, sortDirection) => {\n  return (a, b) => {\n    const row1 = getRowData(a);\n    const row2 = getRowData(b);\n\n    if (row1 && row2) {\n      const v1 = row1[sortDataKey];\n      const v2 = row2[sortDataKey];\n      return collator.compare(v1, v2) * sortDirection;\n    }\n\n    return row1 ? sortDirection : row2 ? -sortDirection : 0;\n  };\n};\n\nconst sortGroups = (groupsMap, getRowData, sortDataKey, sortDirection, depth, currentDepth = 0) => {\n  const groupValues = groupsMap.values();\n\n  if (currentDepth < depth - 1) {\n    for (let group of groupValues) {\n      if (group) {\n        sortGroups(group, getRowData, sortDataKey, sortDirection, depth, currentDepth + 1);\n      }\n    }\n  } else {\n    const sortCallback = getSorter(getRowData, sortDataKey, sortDirection);\n\n    for (let group of groupValues) {\n      if (group) {\n        group.sort(sortCallback);\n      }\n    }\n  }\n};\n\nconst flattenGroups = (groupsMap, collapsedGroups, prefix = [], groupValues = [], rowIndexes = []) => {\n  let idx;\n\n  for (let [groupValue, subGroup] of groupsMap) {\n    if (subGroup) {\n      const concatenated = prefix.concat(groupValue);\n      idx = -groupValues.push(concatenated);\n      rowIndexes.push(idx);\n\n      if (!collapsedGroups.has(idx)) {\n        if (Array.isArray(subGroup)) {\n          rowIndexes.push.apply(rowIndexes, subGroup);\n        } else {\n          flattenGroups(subGroup, collapsedGroups, concatenated, groupValues, rowIndexes);\n        }\n      }\n    }\n  }\n\n  return {\n    groupValues,\n    rowIndexes\n  };\n};\n\nconst getFilteredIndexes = (rowsQuantity, getRowData, filtersMap) => {\n  if (filtersMap.size) {\n    const result = [];\n\n    mainLoop: for (let j = 0, row; j < rowsQuantity; j++) {\n      row = getRowData(j);\n\n      if (row) {\n        for (const [dataKey, value] of filtersMap) {\n          if (!(\"\" + row[dataKey]).toLowerCase().includes(value)) {\n            continue mainLoop;\n          }\n        }\n\n        result.push(j);\n      }\n    }\n\n    return result;\n  }\n\n  return Array.from({\n    length: rowsQuantity\n  }, (v, i) => i);\n};\n\nclass Base {\n  constructor() {\n    this.rowsQuantity = 0;\n    this.getRowData = null;\n    this.columns = [];\n    this.compact = true;\n    this.filtersMap = new Map();\n    this.groupKeys = [];\n    this.sortDataKey = \"\";\n    this.sortDirection = -1;\n    this.collapsedGroups = new Set();\n  }\n\n  setFiltering(dataKey, value) {\n    if (value) {\n      this.filtersMap.set(dataKey, value.toLowerCase());\n    } else {\n      this.filtersMap.delete(dataKey);\n    }\n  }\n\n  toggleCompact() {\n    this.compact = !this.compact;\n  }\n\n  setSorting(dataKey) {\n    if (this.sortDataKey === dataKey) {\n      this.sortDirection *= -1;\n    }\n\n    this.sortDataKey = dataKey;\n  }\n\n  setGrouping(dataKeysArray) {\n    this.groupKeys = dataKeysArray;\n  }\n\n  addGrouping(dataKey) {\n    if (!this.groupKeys.includes(dataKey)) {\n      this.groupKeys.push(dataKey);\n      this.collapsedGroups.clear();\n    }\n  }\n\n  toggleCollapsedGroup(idx) {\n    if (this.collapsedGroups.has(idx)) {\n      this.collapsedGroups.delete(idx);\n    } else {\n      this.collapsedGroups.add(idx);\n    }\n  }\n\n  removeGrouping(dataKey) {\n    const idx = this.groupKeys.indexOf(dataKey);\n\n    if (idx !== -1) {\n      this.groupKeys.splice(idx, 1);\n      this.collapsedGroups.clear();\n    }\n  }\n\n  merge(propertiesObj) {\n    Object.assign(this, propertiesObj);\n  }\n\n}\n\nconst stubFalse = () => false;\n\nclass Mobx extends Base {\n  get visibleColumns() {\n    return this.columns.filter(col => !this.groupKeys.includes(col.dataKey));\n  }\n\n  get priorityGroupValuesArray() {\n    return this.groupKeys.map(dataKey => this.columns.find(c => c.dataKey === dataKey).priorityGroupValues || []);\n  }\n\n  get grouped() {\n    return multiGroupBy(this.filteredIndexes, this.groupKeys, this.getRowData, this.priorityGroupValuesArray);\n  }\n\n  get groupedSorted() {\n    if (this.sortDataKey) {\n      sortGroups(this.grouped, this.getRowData, this.sortDataKey, this.sortDirection, this.groupKeys.length);\n    }\n\n    return this.grouped;\n  }\n\n  get flattenedGroups() {\n    return flattenGroups(this.groupedSorted, this.collapsedGroups);\n  }\n\n  get filteredIndexes() {\n    return getFilteredIndexes(this.rowsQuantity, this.getRowData, this.filtersMap);\n  }\n\n  get noGroupsSortedIndexes() {\n    return this.sortDataKey ? this.filteredIndexes.sort(getSorter(this.getRowData, this.sortDataKey, this.sortDirection)) : this.filteredIndexes;\n  }\n\n  get groupsSortedIndexes() {\n    return this.flattenedGroups.rowIndexes;\n  }\n\n  get hasGrouping() {\n    return !!this.groupKeys.length;\n  }\n\n  get finalIndexes() {\n    return this.hasGrouping ? this.groupsSortedIndexes : this.noGroupsSortedIndexes;\n  }\n\n  constructor() {\n    super();\n    makeObservable(this, {\n      grouped: computed,\n      flattenedGroups: computed,\n      filteredIndexes: computed,\n      hasGrouping: computed,\n      visibleColumns: computed({\n        equals: comparer.structural\n      }),\n      priorityGroupValuesArray: computed({\n        equals: comparer.structural\n      }),\n      finalIndexes: computed({\n        equals: stubFalse\n      }),\n      noGroupsSortedIndexes: computed({\n        equals: stubFalse\n      }),\n      groupedSorted: computed({\n        equals: stubFalse\n      }),\n      rowsQuantity: true,\n      getRowData: true,\n      columns: true,\n      compact: true,\n      filtersMap: true,\n      groupKeys: true,\n      sortDataKey: true,\n      sortDirection: true,\n      collapsedGroups: true,\n      setFiltering: action,\n      toggleCompact: action,\n      setSorting: action,\n      setGrouping: action,\n      addGrouping: action,\n      toggleCollapsedGroup: action,\n      removeGrouping: action,\n      merge: action\n    });\n  }\n\n}\n\nconst RowsAggregator = Mobx;\n\nconst css = {\"wrapper\":\"_2wTxqHK\",\"noUserSelect\":\"kZD27KN\",\"sortableHeader\":\"_1yActl3 kZD27KN\",\"input\":\"_2EIPyG2\",\"groupsPanel\":\"itW7AWz\",\"groupLabel\":\"ALgq7dX kZD27KN\",\"compactToggler\":\"_2Jio7Rb kZD27KN\",\"groupToggler\":\"_26vR1C2 kZD27KN\",\"columnSummaries\":\"_2TtpoAA\"};\n\nconst _excluded = [\"rowsQuantity\", \"getRowData\", \"className\", \"columns\", \"GroupLabel\"];\nconst HEADER_DND_TYPE = \"h\";\nconst HeaderLabel = /*#__PURE__*/observer(({\n  m,\n  dataKey,\n  label,\n  i\n}) => {\n  const [, dragRef] = useDrag(() => ({\n    type: HEADER_DND_TYPE,\n    item: {\n      dataKey\n    }\n  }), [dataKey]);\n  return /*#__PURE__*/jsxs(\"div\", {\n    ref: dragRef,\n    className: css.sortableHeader,\n    onClick: () => m.setSorting(dataKey),\n    \"aria-sort\": m.sortDataKey === dataKey ? m.sortDirection === 1 ? \"ascending\" : \"descending\" : undefined,\n    children: [i === 0 ? /*#__PURE__*/jsx(\"span\", {\n      \"data-collapsed\": m.compact ? \"\" : undefined,\n      onClick: () => m.toggleCompact(),\n      className: css.compactToggler\n    }) : null, label]\n  });\n});\nconst HeaderInput = /*#__PURE__*/observer(({\n  m,\n  dataKey\n}) => m.compact ? null : /*#__PURE__*/jsx(\"input\", {\n  className: css.input,\n  value: m.filtersMap.get(dataKey) || \"\",\n  onChange: e => m.setFiltering(dataKey, e.target.value)\n}));\n\nconst getCount = rowIndexes => {\n  let total = 0;\n\n  if (Array.isArray(rowIndexes)) {\n    total += rowIndexes.length;\n  } else {\n    for (let nested of rowIndexes.values()) {\n      if (nested) {\n        total += getCount(nested);\n      }\n    }\n  }\n\n  return total;\n};\n\nconst getSum = (rowIndexes, dataKey, getRowData) => {\n  let total = 0;\n\n  if (Array.isArray(rowIndexes)) {\n    let row;\n\n    for (const j of rowIndexes) {\n      row = getRowData(j);\n\n      if (row) {\n        total += row[dataKey];\n      }\n    }\n  } else {\n    for (const nested of rowIndexes.values()) {\n      if (nested) {\n        total += getSum(nested, dataKey, getRowData);\n      }\n    }\n  }\n\n  return total;\n};\n\nconst SummaryCell = /*#__PURE__*/observer(({\n  m,\n  column,\n  rowIndexes\n}) => {\n  if (column.totals === \"count\") {\n    return getCount(rowIndexes);\n  }\n\n  if (column.totals === \"sum\") {\n    const sum = getSum(rowIndexes, column.dataKey, m.getRowData);\n    const fn = column.formatTotal || column.format;\n    return fn ? fn(sum) : sum;\n  }\n\n  return null;\n});\n\nconst GroupLabelDefault = ({\n  groupKey,\n  columns,\n  onRemove\n}) => /*#__PURE__*/jsx(\"div\", {\n  className: css.groupLabel,\n  onDoubleClick: onRemove,\n  children: columns.find(col => col.dataKey === groupKey).label\n});\n\nconst GroupsPanel = /*#__PURE__*/observer(({\n  m,\n  GroupLabel\n}) => {\n  const [collectedProps, dropRef] = useDrop(() => ({\n    accept: HEADER_DND_TYPE,\n\n    drop(item) {\n      m.addGrouping(item.dataKey);\n    }\n\n  }), [m]);\n  return m.compact ? null : /*#__PURE__*/jsx(\"div\", {\n    className: css.groupsPanel,\n    ref: dropRef,\n    children: m.groupKeys.length ? m.groupKeys.map(groupKey => /*#__PURE__*/jsx(GroupLabel, {\n      groupKey: groupKey,\n      columns: m.columns,\n      onRemove: () => m.removeGrouping(groupKey)\n    }, groupKey)) : \"Drag column headers here to group by column\"\n  });\n});\n\nconst getInMap = (map, path) => path.reduce((res, key) => res.get(key), map);\n\nconst GroupCell = /*#__PURE__*/observer(({\n  m,\n  columns,\n  idx\n}) => {\n  const isCollapsed = m.collapsedGroups.has(idx);\n\n  if (m.hasGrouping) {\n    const groupPath = m.flattenedGroups.groupValues[~idx];\n\n    if (groupPath) {\n      const lastGroupIndex = groupPath.length - 1;\n      const groupKey = m.groupKeys[lastGroupIndex];\n      /* hidden columns also must be included */\n\n      const {\n        getGroupLabel,\n        label,\n        format\n      } = m.columns.find(c => c.dataKey === groupKey);\n      const groupValue = groupPath[lastGroupIndex];\n      return /*#__PURE__*/jsxs(Fragment, {\n        children: [/*#__PURE__*/jsx(\"span\", {\n          className: css.groupToggler,\n          onClick: () => m.toggleCollapsedGroup(idx),\n          \"data-collapsed\": isCollapsed ? \"\" : undefined,\n          style: {\n            marginLeft: `${lastGroupIndex * 2}em`\n          }\n        }), \"\\xA0\", getGroupLabel ? getGroupLabel(groupValue) : /*#__PURE__*/jsxs(Fragment, {\n          children: [label, \":\\xA0\", format ? format(groupValue) : \"\" + groupValue]\n        }), columns.length ? /*#__PURE__*/jsx(\"span\", {\n          className: css.columnSummaries,\n          children: columns.map(col => col.totals ? /*#__PURE__*/jsxs(\"span\", {\n            children: [col.label, \": \\xA0\", /*#__PURE__*/jsx(SummaryCell, {\n              m: m,\n              column: col,\n              rowIndexes: getInMap(m.grouped, groupPath)\n            })]\n          }, col.dataKey) : null)\n        }) : null]\n      });\n    }\n  }\n\n  return null;\n});\n\nconst ComplexTable = _ref => {\n  let {\n    rowsQuantity,\n    getRowData,\n    className,\n    columns,\n    GroupLabel = GroupLabelDefault\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [m] = useState(() => new RowsAggregator());\n  /* hack to change renderRow by link */\n\n  const {\n    finalIndexes\n  } = m;\n\n  const renderRow = (index, RowProps) => {\n    const realRowIndex = finalIndexes[index];\n    return realRowIndex < 0 ? /*#__PURE__*/jsx(\"tr\", {\n      children: /*#__PURE__*/jsx(\"td\", {\n        colSpan: RowProps.columns.length,\n        children: /*#__PURE__*/jsx(GroupCell, {\n          m: m,\n          idx: realRowIndex,\n          columns: RowProps.columns\n        })\n      })\n    }, index) : /*#__PURE__*/createElement(RowProps.Row, Object.assign({}, RowProps, {\n      key: index,\n      index: realRowIndex\n    }));\n  };\n\n  const renderHeaderCells = columns => columns.map(({\n    dataKey,\n    label,\n    minWidth\n  }, i) => /*#__PURE__*/jsxs(\"th\", {\n    style: {\n      minWidth\n    },\n    children: [/*#__PURE__*/jsx(HeaderLabel, {\n      m: m,\n      dataKey: dataKey,\n      label: label,\n      i: i\n    }), /*#__PURE__*/jsx(HeaderInput, {\n      m: m,\n      dataKey: dataKey\n    })]\n  }, dataKey));\n\n  useEffect(() => m.merge({\n    rowsQuantity,\n    getRowData,\n    columns\n  }), [rowsQuantity, getRowData, columns]);\n  useEffect(() => {\n    const initialGroupingKeys = m.visibleColumns.slice().sort((a, b) => (a.initialGrouingIndex || 0) - (b.initialGrouingIndex || 0)).filter(col => col.initialGroupingIndex).map(col => col.dataKey);\n    m.setGrouping(initialGroupingKeys);\n  }, []);\n\n  const renderTfootContent = normalizedVisibleColumns => normalizedVisibleColumns.some(col => !!col.totals) ? /*#__PURE__*/jsx(\"tr\", {\n    children: normalizedVisibleColumns.map(col => /*#__PURE__*/jsx(\"td\", {\n      children: /*#__PURE__*/jsx(SummaryCell, {\n        m: m,\n        column: col,\n        rowIndexes: m.filteredIndexes\n      })\n    }, col.dataKey))\n  }) : null;\n  /*\n      Normally must be wrapped with DndProvider, but nested providers throw error.\n      Waiting for react-dnd release, which would fix this\n  */\n\n\n  return /*#__PURE__*/jsxs(\"div\", {\n    className: cx(css.wrapper, className),\n    children: [/*#__PURE__*/jsx(GroupsPanel, {\n      m: m,\n      GroupLabel: GroupLabel\n    }), /*#__PURE__*/jsx(Table, Object.assign({\n      columns: m.visibleColumns,\n      rowsQuantity: finalIndexes.length,\n      getRowData: getRowData,\n      renderRow: renderRow,\n      renderHeaderCells: renderHeaderCells,\n      renderTfootContent: renderTfootContent\n    }, props))]\n  });\n};\n\nconst index = /*#__PURE__*/observer(ComplexTable);\n\nexport { index as Table };\n","import { Table } from \"af-react-table\";\nimport faker from \"faker\";\n\nconst rows = Array.from({ length: 10000 }, (v, i) => ({\n    i,\n    fixedRange: i % 9,\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    country: faker.address.country()\n}));\n\n/* Math.random is not the best option, because same rowIndex should produce same height */\nconst getPureRandomLineHeight = rowIndex => 20 + ( rowIndex % 53 ) + ( rowIndex % 87 );\n\nconst ComplexTable = () => (\n    <Table\n        rowsQuantity={rows.length}\n        getRowData={i => rows[ i ]}\n        estimatedRowHeight={30}\n        columns={[\n            {\n                dataKey: \"i\",\n                label: \"i\",\n                totals: \"sum\",\n                render: cellData => (\n                    <div style={{\n                        color: \"#000\",\n                        textAlign: \"center\",\n                        lineHeight: `${getPureRandomLineHeight(cellData)}px`,\n                        background: `hsl(${cellData*11%360},60%,60%)`\n                    }}>\n                        {cellData}\n                    </div>\n                )\n            },\n            {\n                dataKey: \"fixedRange\",\n                format: v => `fr ${v}`,\n                label: \"FR\",\n                initialGroupingIndex: 1,\n                priorityGroupValues: [ 4, 7, 71, 5 ]\n            },\n            {\n                dataKey: \"firstName\",\n                label: \"first name\",\n                initialGroupingIndex: 2,\n                priorityGroupValues: [ \"Dennis\" ],\n                totals: \"count\"\n            },\n            { dataKey: \"lastName\", label: \"last name\" },\n            { dataKey: \"country\", label: \"country\" }\n        ]}\n    />\n);\n\nexport default ComplexTable;"],"names":["collator","Intl","Collator","undefined","numeric","getSorter","getRowData","sortDataKey","sortDirection","a","b","row1","row2","v1","v2","compare","sortGroups","groupsMap","depth","currentDepth","groupValues","values","group","sortCallback","sort","flattenGroups","collapsedGroups","prefix","rowIndexes","idx","groupValue","subGroup","concatenated","concat","push","has","Array","isArray","apply","stubFalse","RowsAggregator","constructor","this","rowsQuantity","columns","compact","filtersMap","Map","groupKeys","Set","setFiltering","dataKey","value","set","toLowerCase","delete","toggleCompact","setSorting","setGrouping","dataKeysArray","addGrouping","includes","clear","toggleCollapsedGroup","add","removeGrouping","indexOf","splice","merge","propertiesObj","Object","assign","filter","col","map","find","c","priorityGroupValues","indexesArray","groupDataKeysList","priorityGroupValuesArray","lastGroupIndex","length","lastGroupDataKey","rowIndex","row","tmpInnerObject","cellValue","innerObject","i","get","priorityValue","multiGroupBy","filteredIndexes","grouped","groupedSorted","size","result","mainLoop","j","from","v","getFilteredIndexes","flattenedGroups","hasGrouping","groupsSortedIndexes","noGroupsSortedIndexes","super","makeObservable","computed","visibleColumns","equals","comparer","finalIndexes","action","css","_excluded","HeaderLabel","observer","m","label","dragRef","useDrag","type","item","jsxs","ref","className","onClick","children","jsx","HeaderInput","onChange","e","target","getCount","total","nested","getSum","SummaryCell","column","totals","sum","fn","formatTotal","format","GroupLabelDefault","groupKey","onRemove","onDoubleClick","GroupsPanel","GroupLabel","collectedProps","dropRef","useDrop","accept","drop","GroupCell","isCollapsed","groupPath","getGroupLabel","Fragment","style","marginLeft","path","reduce","res","key","ComplexTable","_ref","props","_objectWithoutPropertiesLoose","useState","useEffect","initialGroupingKeys","slice","initialGrouingIndex","initialGroupingIndex","cx","Table","renderRow","index","RowProps","realRowIndex","colSpan","createElement","Row","renderHeaderCells","minWidth","renderTfootContent","normalizedVisibleColumns","some","rows","fixedRange","firstName","faker","lastName","country","estimatedRowHeight","render","cellData","color","textAlign","lineHeight","background"],"sourceRoot":""}