{"version":3,"sources":["webpack://af-virtual-scroll/./src/components/common/ExtraHeight/index.js","webpack://af-virtual-scroll/./src/components/Table/Colgroup/index.js","webpack://af-virtual-scroll/./src/components/Table/style.module.scss?eda3","webpack://af-virtual-scroll/./src/components/Table/index.js","webpack://af-virtual-scroll/./src/components/Table/renderers.js","webpack://af-virtual-scroll/./src/components/common/Rows/style.module.scss?bf14","webpack://af-virtual-scroll/./src/components/common/Rows/index.js"],"names":["model","children","el","ref","useState","useEffect","prevHeight","observe","height","updateExtraStickyHeight","unobserve","cloneElement","Colgroup","columns","map","dataKey","background","border","width","style","memo","Table","getRowData","getRowProps","renderRow","Row","renderHeaderCells","renderTfootContent","Cell","headless","className","props","Container","cx","css","Rows","Spacer","defaultProps","index","RowProps","rowData","column","colSpan","length","minWidth","label","render","format","cellData","undefined","Events","START_INDEX","END_INDEX","spacerKey","Math","random","toString","rest","useSubscription","startIndex","endIndex","virtualTopOffset","setSpacerNode","result","aria-hidden","i","push"],"mappings":";wNAGA,MAuBA,EAvBoB,EAAGA,QAAOC,eAE1B,MAAQC,EAAIC,IAAQC,gBAkBpB,OAhBAC,gBAAU,KACN,GAAIH,GAAMF,EAAO,CACb,IAAIM,EAAa,EAOjB,OALAC,OAASL,GAAIM,IACTR,EAAMS,wBAAyBD,EAASF,GACxCA,EAAaE,KAGV,MACHE,OAAWR,GACXF,EAAMS,yBAA0BH,OAGzC,CAAEJ,EAAIF,KAEFW,kBAAcV,EAAU,CAAEE,S,eCrBrC,MAAMS,EAAW,EAAGC,cAChB,8BACKA,EAAQC,KAAI,EAAGC,UAASC,aAAYC,SAAQC,YACzC,gBAEIC,MAAO,CACHD,QACAF,aACAC,WAJCF,OAWrB,GAAeK,UAAMR,GChBrB,EAA0B,0BAA1B,EAAgE,0B,kICuB1DS,EAAQ,QAAC,QACXR,EADW,WAEXS,EAFW,YAGXC,EAHW,UAIXC,EAJW,IAKXC,EALW,kBAMXC,EANW,mBAOXC,EAPW,KAQXC,EARW,SASXC,EATW,UAUXC,GAVU,EAWPC,GAXO,mBAaV,SAACC,EAAA,EAAD,eAAWF,WAAWG,OAAGC,EAAYJ,IAAgBC,EAArD,UACK/B,IACG,mBAAO8B,UAAWI,EAAlB,WACI,SAAC,EAAD,CAAUrB,QAASA,IAClBgB,EAAW,MACR,SAAC,EAAD,CAAa7B,MAAOA,EAApB,UACI,4BACI,wBACK0B,EAAkBb,UAKnC,4BACI,SAACsB,EAAA,EAAD,CACInC,MAAOA,EACPoC,OAAO,KACPvB,QAASA,EACTS,WAAYA,EACZC,YAAaA,EACbE,IAAKA,EACLG,KAAMA,EAPV,SASKJ,MAGRG,GACG,SAAC,EAAD,CAAa3B,MAAOA,EAApB,UACI,2BACK2B,EAAoBd,OAG7B,YA6CpBQ,EAAMgB,aAAe,CACjBR,UAAU,EAEVL,UC5FqB,CAAEc,EAAOC,KAAc,SAACA,EAASd,IAAV,eAA0Ba,MAAOA,GAAWC,GAAzBD,GD6F/Db,IChHe,EAAGa,QAAOzB,UAASS,aAAYC,cAAaK,WAE3D,MAAMY,EAAUlB,EAAYgB,GAE5B,OACI,+BAASf,GAAaA,EAAYiB,EAAQF,GAA1C,UACKE,EAAU3B,EAAQC,KAAK2B,IACpB,yBACI,SAACb,EAAD,CAAMY,QAASA,EAASC,OAAQA,KAD3BA,EAAO1B,YAIhB,eAAI2B,QAAS7B,EAAQ8B,OAArB,SAbmB,UDmH/BjB,kBC5F6Bb,GAAWA,EAAQC,KAAK2B,IACrD,eAAyBtB,MAAO,CAAEyB,SAAUH,EAAOG,UAAnD,SACKH,EAAOI,OADHJ,EAAO1B,WD4FhBa,KCvFgB,EAAGY,UAASC,aAC5B,MAAM,OAAEK,EAAF,QAAU/B,EAAV,OAAmBgC,GAAWN,EAEpC,IAAIO,EAAWR,EAASzB,GAExB,YAAiBkC,IAAbD,EAlC2B,IAsC3BF,EACOA,EAAQE,EAAUR,GAGzBO,EACOA,EAAQC,GAGZA,IDyEX,SAAe5B,UAAMC,I,mFE1HrB,SAAgB,OAAS,2B,qDCGnB6B,EAAS,CAAEC,KAAaC,MAExBC,EAAYC,KAAKC,SAASC,SAAS,IAyBzC,EAvBa,QAAC,MAAExD,EAAF,SAASC,EAAT,OAAmBmC,EAAS,OAA7B,EAAuCqB,GAAvC,mBAAkDC,OAC3D1D,GACA,EAAG2D,aAAYC,WAAUC,mBAAkBC,oBAEvC,MAAMC,EAAS,EACX,SAAC3B,EAAD,CAEIN,UAAWI,UACX8B,cAAY,OACZ7C,MAAO,CAAEX,OAAQqD,GACjB1D,IAAK2D,GAJAT,IAQb,IAAK,IAAIY,EAAIN,EAAYM,EAAIL,EAAUK,IACnCF,EAAOG,KAAKjE,EAAUgE,EAAGR,IAG7B,OAAOM,IAEXb","file":"37da1698448cb018adb8.js","sourcesContent":["import { useState, cloneElement, useEffect } from \"react\";\nimport { observe, unobserve } from \"utils/heightObserver\";\n\nconst ExtraHeight = ({ model, children }) => {\n\n    const [ el, ref ] = useState();\n\n    useEffect(() => {\n        if( el && model ){\n            let prevHeight = 0;\n\n            observe( el, height => {\n                model.updateExtraStickyHeight( height - prevHeight );\n                prevHeight = height;\n            });\n    \n            return () => {\n                unobserve( el );\n                model.updateExtraStickyHeight( -prevHeight );\n            }\n        }\n    }, [ el, model ]);\n\n    return cloneElement( children, { ref });\n}\n\nexport default ExtraHeight;","import { memo } from \"react\";\r\n\r\nconst Colgroup = ({ columns }) => (\r\n    <colgroup>\r\n        {columns.map(({ dataKey, background, border, width }) => (\r\n            <col\r\n                key={dataKey}\r\n                style={{\r\n                    width,\r\n                    background,\r\n                    border\r\n                }}\r\n            />\r\n        ))}\r\n    </colgroup>\r\n);\r\n\r\nexport default memo( Colgroup );","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_3xHZ6hLxyHZ-v8LLU1YA7y\",\"bodyTable\":\"_3VNLkND9VRhxpdmzEGLiXt\"};","import { memo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport cx from \"utils/cx\";\r\n\r\nimport Rows from \"../common/Rows\";\r\nimport Container from \"../common/Container\";\r\nimport ExtraHeight from \"../common/ExtraHeight\";\r\n\r\nimport Colgroup from \"./Colgroup\";\r\n\r\nimport {\r\n    renderRow,\r\n    Row,\r\n    renderHeaderCells,\r\n    Cell\r\n} from \"./renderers\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\n/*\r\n    Todo:\r\n        * think about border-collapse offsetHeight issue ( maybe throw border-collapse )\r\n*/\r\n\r\nconst Table = ({\r\n    columns,\r\n    getRowData,\r\n    getRowProps,\r\n    renderRow,\r\n    Row,\r\n    renderHeaderCells,\r\n    renderTfootContent,\r\n    Cell,\r\n    headless,\r\n    className,\r\n    ...props\r\n}) => (\r\n    <Container className={cx(css.wrapper,className)} {...props}>\r\n        {model => (\r\n            <table className={css.bodyTable}>\r\n                <Colgroup columns={columns} />\r\n                {headless ? null : (\r\n                    <ExtraHeight model={model}>\r\n                        <thead>\r\n                            <tr>\r\n                                {renderHeaderCells(columns)}\r\n                            </tr>\r\n                        </thead>\r\n                    </ExtraHeight>\r\n                )}\r\n                <tbody>\r\n                    <Rows\r\n                        model={model}\r\n                        Spacer=\"tr\"\r\n                        columns={columns}\r\n                        getRowData={getRowData}\r\n                        getRowProps={getRowProps}\r\n                        Row={Row}\r\n                        Cell={Cell}\r\n                    >\r\n                        {renderRow}\r\n                    </Rows>\r\n                </tbody>\r\n                {renderTfootContent ? (\r\n                    <ExtraHeight model={model}>\r\n                        <tfoot>\r\n                            {renderTfootContent( columns )}\r\n                        </tfoot>\r\n                    </ExtraHeight>\r\n                ) : null}\r\n            </table>\r\n        )}\r\n    </Container>\r\n);\r\n\r\nTable.propTypes = {\r\n    className: PropTypes.string,\r\n    columns: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.string,\r\n                PropTypes.shape({\r\n                // unique key for column\r\n                dataKey: PropTypes.string.isRequired,\r\n\r\n                // for details see CellComponent implementation\r\n                format: PropTypes.func,\r\n                render: PropTypes.func,\r\n                formatTotal: PropTypes.func,\r\n                totals: PropTypes.string,\r\n\r\n                // column props, affecting colgroup > col tags\r\n                background: PropTypes.string,\r\n                border: PropTypes.string,\r\n                width: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\r\n                \r\n                // works pretty shitty in col tag\r\n                minWidth: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\r\n                CellComponent: PropTypes.elementType,\r\n                getCellExtraProps: PropTypes.func\r\n            })\r\n        ])\r\n    ).isRequired,\r\n\r\n    getRowData: PropTypes.func.isRequired,\r\n    getRowProps: PropTypes.func,\r\n    renderTfootContent: PropTypes.func,\r\n    renderHeaderCells: PropTypes.func,\r\n    Row: PropTypes.elementType,\r\n    Cell: PropTypes.elementType,\r\n\r\n    headless: PropTypes.bool,\r\n};\r\n\r\n\r\nTable.defaultProps = {\r\n    headless: false,\r\n\r\n    renderRow,\r\n    Row,\r\n    renderHeaderCells,\r\n    Cell\r\n};\r\n\r\nexport default memo( Table );","/*\n    If all cells in a row would be completely empty - row can \"collapse\" short.\n    To prevent it we can fill it with &nbsp;\n*/\nconst DEFAULT_EMPTY_CELL_CONTENT = \"\\u00A0\";\n\nexport const Row = ({ index, columns, getRowData, getRowProps, Cell }) => {\n\n    const rowData = getRowData( index );\n\n    return (\n        <tr {...(getRowProps&&getRowProps(rowData,index))}>\n            {rowData ? columns.map( column => (\n                <td key={column.dataKey}>\n                    <Cell rowData={rowData} column={column} />\n                </td>\n            )) : (\n                <td colSpan={columns.length}>\n                    {DEFAULT_EMPTY_CELL_CONTENT}\n                </td>\n            )}\n        </tr>\n    );\n}\n\nexport const renderRow = ( index, RowProps ) => <RowProps.Row key={index} index={index} {...RowProps} />\n\nexport const renderHeaderCells = columns => columns.map( column => (\n    <th key={column.dataKey} style={{ minWidth: column.minWidth }}>\n        {column.label}\n    </th>\n));\n\nexport const Cell = ({ rowData, column }) => {\n    const { render, dataKey, format } = column;\n\n    let cellData = rowData[ dataKey ];\n    \n    if( cellData === undefined ){\n        return DEFAULT_EMPTY_CELL_CONTENT;\n    }\n\n    if( render ){\n        return render( cellData, rowData );\n    }\n\n    if( format ){\n        return format( cellData );\n    }\n\n    return cellData;\n}","// extracted by mini-css-extract-plugin\nexport default {\"spacer\":\"_2q9_Y-5hrbxfXeVDNj4Bxk\"};","import useSubscription from \"hooks/useSubscription\";\r\nimport { START_INDEX, END_INDEX } from \"constants/events\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst Events = [ START_INDEX, END_INDEX ];\r\n\r\nconst spacerKey = Math.random().toString(36);\r\n\r\nconst Rows = ({ model, children, Spacer = \"div\", ...rest }) => useSubscription(\r\n    model, \r\n    ({ startIndex, endIndex, virtualTopOffset, setSpacerNode }) => {\r\n\r\n        const result = [\r\n            <Spacer\r\n                key={spacerKey}\r\n                className={css.wrapper}\r\n                aria-hidden=\"true\"\r\n                style={{ height: virtualTopOffset}}\r\n                ref={setSpacerNode}\r\n            />\r\n        ];    \r\n        \r\n        for( let i = startIndex; i < endIndex; i++ ){\r\n            result.push(children( i, rest ));\r\n        }\r\n\r\n        return result;\r\n    },\r\n    Events\r\n);\r\n\r\nexport default Rows;"],"sourceRoot":""}